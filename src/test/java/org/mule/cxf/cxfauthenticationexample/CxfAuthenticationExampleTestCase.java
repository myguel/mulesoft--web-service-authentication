/*
 * Generated by the Mule project wizard. http://mule.mulesoft.org
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package org.mule.cxf.cxfauthenticationexample;

import org.mule.DefaultMuleMessage;
import org.mule.api.MuleException;
import org.mule.api.MuleMessage;
import org.mule.module.client.MuleClient;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.util.IOUtils;

import java.io.IOException;
import java.io.InputStream;

import org.junit.Test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class CxfAuthenticationExampleTestCase extends FunctionalTestCase
{
    @Override
    protected String getConfigResources()
    {
        return "cxf-secure-proxy-example.xml";
    }

    @Override
    protected void doSetUp() throws Exception
    {
        ClientPasswordCallback.setPassword("secret");
        super.doSetUp();
    }

    @Test
    public void testProxyEnvelope() throws Exception
    {
        MuleMessage result = sendRequest("http://localhost:8089/proxy-envelope", "in-message.xml");
        assertFalse(result.getPayloadAsString().contains("Fault"));
        assertTrue(result.getPayloadAsString().contains("joe"));
    }

    @Test
    public void testProxyEnvelopeBadCredentials() throws Exception
    {
        MuleMessage result = sendRequest("http://localhost:8089/proxy-envelope", "invalid-in-message.xml");
        assertTrue(result.getPayloadAsString().contains("Fault"));
        assertTrue(result.getPayloadAsString().contains("Authentication Attempt Failed"));
    }


    protected MuleMessage sendRequest(String url, String messageResource) throws IOException, MuleException
    {
        MuleClient client = new MuleClient(muleContext);

        InputStream stream = IOUtils.getResourceAsStream(messageResource, getClass());
        assertNotNull(stream);

        MuleMessage result = client.send(url, new DefaultMuleMessage(stream, muleContext));
        return result;
    }

}
